#include "ros/ros.h"
#include "std_msgs/String.h"
#include "sensor_msgs/Image.h"
#include "sensor_msgs/CameraInfo.h"
#include "sensor_msgs/Imu.h"
#include "geometry_msgs/Quaternion.h"
#include "geometry_msgs/Vector3.h"
#include "ros/time.h"
#include "sensor_msgs/image_encodings.h"

#include <opencv2/highgui/highgui.hpp>
#include <cv_bridge/cv_bridge.h>

#include <sstream>
#include <iostream>
#include <string>
#include <fstream>

/**
 * Gets next sensor reading from file given that the file follows a prespecified standard
 *
 * The prespecified standard is that the file is a csv, and each line is of the form 
 * timestamp,value,value,value,(int)sensor_type. Value can be set to zero when N/A
 * e.g. for cameras 
 *
 * @param file				pointer to csv file with readings
 * @return            an array[5] that stores the current line being read or NULL
 */
using namespace std;
double* getNextReading(ifstream* file){

	std::string value;
	int count = 1;

	if((*file).good()){
		
		double* sensor_reading = new double[5];
		while((*file).good() && c<6){

			if(c <=4 ){			
				std::getline ( *file, value, ',' ); //read string until next comma			
			}	
			else{
				std::getline ( *file, value); //read string until next end
			}

			sensor_reading[c-1] = (double)atof(value.c_str());	
			c++;
		}
	
	}
	else{		
		return NULL;
	}

	return sensor_reading;
}

/**
 * This tutorial demonstrates simple sending of messages over the ROS system.
 */
int main(int argc, char **argv)
{
  /**
   * The ros::init() function needs to see argc and argv so that it can perform
   * any ROS arguments and name remapping that were provided at the command line.
   * For programmatic remappings you can use a different version of init() which takes
   * remappings directly, but for most command-line programs, passing argc and argv is
   * the easiest way to do it.  The third argument to init() is the name of the node.
   *
   * You must call one of the versions of ros::init() before using any other
   * part of the ROS system.
   */
  ros::init(argc, argv, "rgbdTest_publisher");

  /**
   * NodeHandle is the main access point to communications with the ROS system.
   * The first NodeHandle constructed will fully initialize this node, and the last
   * NodeHandle destructed will close down the node.
   */
  ros::NodeHandle n;

  /**
   * The advertise() function is how you tell ROS that you want to
   * publish on a given topic name. This invokes a call to the ROS
   * master node, which keeps a registry of who is publishing and who
   * is subscribing. After this advertise() call is made, the master
   * node will notify anyone who is trying to subscribe to this topic name,
   * and they will in turn negotiate a peer-to-peer connection with this
   * node.  advertise() returns a Publisher object which allows you to
   * publish messages on that topic through a call to publish().  Once
   * all copies of the returned Publisher object are destroyed, the topic
   * will be automatically unadvertised.
   *
   * The second parameter to advertise() is the size of the message queue
   * used for publishing messages.  If messages are published more quickly
   * than we can send them, the number here specifies how many messages to
   * buffer up before throwing some away.
   */
  ros::Publisher img_pub = n.advertise<sensor_msgs::Image>("/camera/rgb/image_mono", 1000);
	ros::Publisher depth_img_pub = n.advertise<std_msgs::Image>("/camera/depth/image", 1000);

	ros::Publisher img_info_pub = n.advertise<std_msgs::CameraInfo>("/camera/rgb/camera_info ", 1000);
	ros::Publisher depth_img_info_pub = n.advertise<std_msgs::CameraInfo>("/camera/depth/camera_info", 1000);
		


  ros::Rate loop_rate(10);

	std::ifstream sensorFile("/home/sastrygrp/Documents/code/sensor12.csv");
	std::string input = 'y';
	while(input.strcmp('y') == 0){
	
	double* temp;
	temp = getNextReading(&sensorFile);
	std::cout<< temp[0]+","+temp[1]+","+temp[2]+","+temp[3]+","+temp[5] <<std::endl;
	std::cout << '\n' <<"Press a key to continue..."<<std::endl;
	cin >> input;
	
	}

	return 0;

  /**
   * A count of how many messages we have sent. This is used to create
   * a unique string for each message.
   */
  int count = 0;
  while (ros::ok())
  {
    /**
     * This is a message object. You stuff it with data, and then publish it.
     */
    std_msgs::String msg;

    std::stringstream ss;
    ss << "hello world " << count;
    msg.data = ss.str();

    ROS_INFO("%s", msg.data.c_str());

    /**
     * The publish() function is how you send messages. The parameter
     * is the message object. The type of this object must agree with the type
     * given as a template parameter to the advertise<>() call, as was done
     * in the constructor above.
     */
    //chatter_pub.publish(msg);

    ros::spinOnce();

    loop_rate.sleep();
    ++count;
  }


  return 0;
}
